{"meta":{"title":"韩涛的个人主页","subtitle":null,"description":null,"author":"Han Tao","url":"https://ishantao.github.io"},"pages":[{"title":"","date":"2018-08-29T13:35:21.682Z","updated":"2018-08-29T13:35:21.682Z","comments":true,"path":"categories/index.html","permalink":"https://ishantao.github.io/categories/index.html","excerpt":"","text":"title: 分类date: 日期type: “categories”comments: false"},{"title":"","date":"2018-08-29T13:36:08.900Z","updated":"2018-08-29T13:36:08.900Z","comments":true,"path":"tags/index.html","permalink":"https://ishantao.github.io/tags/index.html","excerpt":"","text":"title: 标签date: 日期type: “tags”comments: false"},{"title":"简介","date":"2018-08-30T11:54:39.000Z","updated":"2018-09-03T06:25:25.850Z","comments":true,"path":"about/index.html","permalink":"https://ishantao.github.io/about/index.html","excerpt":"","text":"#个人简介 ##编程小萌新 ##大佬带带我"}],"posts":[{"title":"Javascript简单语法","slug":"JavaScript","date":"2018-09-03T11:54:39.000Z","updated":"2018-09-04T11:41:43.908Z","comments":true,"path":"2018/09/03/JavaScript/","link":"","permalink":"https://ishantao.github.io/2018/09/03/JavaScript/","excerpt":"","text":"JavaScript 的基本语法数据类型 1. 区分大小写 2. 命名规范： 1. 由字母，数字，下划线（_）组成或者是（$）符号 2. 不能以数字开头 3. 不能够使用关键字，保留字等作为标识符 3. 变量是**松散类型** 可以用来保存任何类型的数据 123456var name_01;//合法var 8_name; //不合法var age = 18;var email = \"123456789@qq.ocm\";var name_02 = \"haha\", age_1 = 18, email_1 = \"321654@qq.com\";// 1. 省略var声明的变量是全局变量 （不推荐使用） 基本数据类型 Undefined ：未定义类型 Null ：null值表示一个空对象指针，如果定义的变量在将来保存对象，最好初始化为努null。undefined是null派生的所以null == undefined为true。 Boolean ： 123//数字除0之外转化成布尔都是true//字符串除空串之外转化成布尔都是true//null和undefined转成布尔为false number ：表示整数或浮点数，NaN（Not a Number）表示非数值，属于Number。涉及NaN的操作（如：NaN/10）都会返回NaN，NaN与任何数值都不相等，包括本身。 12 String : 字符串。 123//toString()与String()str.toString() //str是要转换的类容，可以是数值，布尔，对象和字符串String（）//是一个函数可以将任何类型转化成字符串，类似与Number（）； 复杂数据类型 Object 12345//typeof的使用返回变量的类型var name_1 = \"Mary\"；typeof name_1;typeof(name_20);//两种都可以 数值转换1234567var age = \"16\";Number（age）//返回为值16,类型是numbervar topval = \"28px\";parseInt(topval)；//返回为28，类型是number，但是只能是数字开头才能提取到数字var num = \"12.34.56\"parseFloat（num）;//知道第一个小数点，后返回为12.34parseFloat（\"000.12\"）//忽略前导0，返回0.12 操作符 算术操作符 +，-，*，/，% ，++a（先增加在用），a++（先用在增加） 1234var a = 10;var b = 5;var c = a++-b //c的值为5，a的值为11var d = ++a-b//c的值为6，a的值为11 逻辑操作符 ： ! , ||, &amp;&amp; 123//! 首先把数据转化为布尔值，然后取反，结果为true或false// 逻辑与 &amp;&amp; js中逻辑与和其他语言不太一样，如果第一个操作数是true(或者能够转为true)，计算结果就是第二个操作数，如果第一个操作数是false，结果就是false（短路计算），对于一些特殊数值不遵循以上规则.//逻辑或 || 如果第一个操作数不是false，结果就是第一个操作数，否则结果是第二个操作数。如果第一个操作数能够转为true，结果就是第一个操作数 赋值操作符 ：=, +=,-=,/=,*= 12var a = 5;a = a + 5;//==&gt;a +=5; 比较操作符 ：&lt;,&gt; ,&lt;=,==,===,!=,!==返回值boolean 12//==值是否相等//===全等还要比较类型. 三元操作符 ： ? 可以代替简单的if语句 12var age = 18;var result = (age&gt;18)?\"成年\":\"不成年\"； if语句1234567891011121314151617181920//第一种var age = 18;if(age&gt;18)&#123; alert(\"你以成年\")；&#125;else&#123; alert(\"你还未成年\");&#125;//第二种var age = 18if(age &lt; 18)&#123; alert(\"你还未成年\");&#125;else if(age &gt;= 18 &amp;&amp; age &lt;= 59)&#123; aleart(\"你可以进入\");&#125;else&#123; alert(\"你以超出年纪\");&#125;//if语句可以没有else块//可以嵌套使用。 switch 语句1234567891011121314151617181920212223var day = new Date().getDay();switch (day)&#123; case 0: alert(\"星期日\"); break; case 1: alert(\"星期一\"); break; case 2: alert(\"星期二\"); break; case 3: alert(\"星期三\"); break; case 4: alert(\"星期四\"); break; case 5: alert(\"星期五\"); break; default: alert(\"星期六\");&#125; 循环语句123456789101112131415var sum = 0;for(var i = 1; i &lt; 10; i++)&#123; sum +=i; &#125;//sum结果为45；var sum = 0;var i = 0;while(i &lt; 10)&#123; sum += i; i++;&#125;//sum值为45；//break跳出循环//跳出本次循环 function123456789101112131415161718function myFunction()&#123; alert(\"我是函数\"); &#125;function myFunction1(num1,num2)&#123; var sum = mun1 + num2; alert(sum);&#125;//参数不需要指定参数类型function test()&#123; //arguments 传进来的所有参数，可以跟数组一样的访问 arguments.length //参数的个数 arguments[0] //第一个参数&#125;test（1,1,3,5,6）;//arguments.length==5//arguments[0]==1 Array(数组) 对象创建方法1var people = [\"people1\", \"people2\"]; 123var people = new Array();people[0] = \"haha\";people[1] = \"hehe\"; 1var people = new Array(\"people\",\"people1\"); 访问：与Java相同根据下标访问与Java不同点 在一个数组中可以有多种类型的变量 可以包含一些对象元素，函数，数组 常用方法增,删12345678910//push把值加在数组最后var people = new Array();people.push(\"Mary\");//unshift把值加在数组前头people.unshift(\"Bob\");//pop删掉最后一个var n = pople.pop();// n = \"Mary\" ,people 中只有\"Bob\";//shift删掉第一个与pop类似people。shift(); 转成String12345678//join()方法，将数组转成stringvar num = [0,1,2];var str = num.join();//srt 是\"0,1,2\"var str1 = num.jion(\"\");//str1是\"012\"var str2 = num.join(\"-\");//str2 是\"0-1-2\"; 查找123456indexOf(a,b)//从b开始查找a出现的位置，没找到返回值为-1.a元素要与数组中元素的类型一至才能找到。lastIndexOf(\".\")从末尾开始。var arr = [\"1\",\"1\",\"2\",\"1\",\"3\"];var pos = arr.indexOf(\"1\",2);var pos1 = arr.indexOf(1,2);alert(pos);//pos的值为3alert(pos1);//pos1的值为-1 其他常用方法12345678910111213141516171819reverse();//将数组反转sort(function(a,b)&#123; return b-a;&#125;); //对数组进行降序排列//sort（）将数字会转化成string进行排列，所以要给他一个函数作为比较方法。concat()//将多个数组连接起来slice(a,b)//从a开始截取到b。a可以是负数，若是负数从数组尾部开始,b若不写则截取到结尾。var arr = [\"1\",\"2\",\"3\"];var arr1 = arr.slice(-2,3) //==&gt;arr.slice(1,3);//splice(a,b)从a开始删除b个元素，反回值为删除的数组元素。b为0则不删除。//splice(a,0,\"m\",\"n\")在a的后面插入\"m\",\"n\".返回值为空//splice()还可以用于替换。var arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];arr.splice(0,2);//从0开始删除两个元素arr.splice(0,0,\"a\",\"b\");//从0开始添加\"a\",\"b\"arr.splice(0,1,\"x\")//从0开始删除一个元素，在从0开始添加一个\"x\". 实例12345678//实例：获取文件后缀名var url = \"abcd.hh.txt\";function getFileFormat(url)&#123; var pos = url.lastIndexOf(\".\"); return url.substr(pos);&#125;var format = getFileFormat(url); JavaScript 中的对象JavaScript 中一切都为对象：​ 字符串，数组，数字，函数和自定义对象 JavaScript对象1. JavaScript提供了多个内建对象如string，data，array等。 2. 对象只是带有属性和方法的特殊数据类型 访问对象的属性与方法​ 与Java相同classname.name可以访问 访问属性例如： 1objectName.propertyName 访问方法例如： 12var message=\"Hello world!\";var x=message.toUpperCase(); 创建对象的方法 定义并创建对象的实例 使用函数来定义对象，然后创建新的对象实例 实例： 12345678910111213141516171819202122232425//第一种创建了对象的一个新实例，并向其添加了四个属性：person=new Object();person.firstname=\"Bill\";person.lastname=\"Gates\";person.age=56;person.eyecolor=\"blue\";//替代语法（使用对象 literals）属于第一种方法person=&#123;firstname:\"John\",lastname:\"Doe\",age:50,eyecolor:\"blue\"&#125;;//第二种使用对象构造器function person(firstname,lastname,age,eyecolor)&#123; this.firstname=firstname; this.lastname=lastname; this.age=age; this.eyecolor=eyecolor; function changeName(name)&#123; this.lastname=name; &#125;&#125;//实例化var myFather=new person(\"Bill\",\"Gates\",56,\"blue\");var myMother=new person(\"Steve\",\"Jobs\",48,\"green\");myMother.changeName(\"Ballmer\"); JavaScript 类1. JavaScript 是面向对象的语言，但 JavaScript 不使用类。 2. 在 JavaScript 中，不会创建类，也不会通过类来创建对（就像在其他面向对象的语言中那样）。JavaScript 基于 prototype，而不是基于类的。 JavaScript for..in 循环12345678var person=&#123;fname:\"Bill\",lname:\"Gates\",age:56&#125;;for (x in person) &#123; txt=txt + person[x]; &#125;//txt = BillGates56; 常用的一些函数获取星期几12new Date().getDay();//返回值number（0-6）,0是星期日 输出1document.write(\"你好\");","categories":[{"name":"-学习","slug":"学习","permalink":"https://ishantao.github.io/categories/学习/"}],"tags":[{"name":"-JavaScript","slug":"JavaScript","permalink":"https://ishantao.github.io/tags/JavaScript/"}]},{"title":"Ajax和Json","slug":"Ajax和Json","date":"2018-08-30T11:54:39.000Z","updated":"2018-09-03T12:27:24.283Z","comments":true,"path":"2018/08/30/Ajax和Json/","link":"","permalink":"https://ishantao.github.io/2018/08/30/Ajax和Json/","excerpt":"","text":"Ajax和JsonAjax### Ajax是什么 1. AJAX = 异步 JavaScript 和 XML。 2. AJAX 是一种用于创建快速动态网页的技术。 3. 通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 4. 传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。 5. **AJAX应用程序与浏览器和平台无关的！** jQuery对Ajax的使用​ 实例： 123456789$.ajax(&#123; url: \"/edit/topic/upload\", data: data, type: \"post\", dataType: \"json\", success: function (data) &#123; alert(data.message); &#125; &#125;) 常用参数说明： url：要求为String类型的参数，（默认为当前页地址）发送请求的地址 ，可以是jsp也可以是controller层的地址。 type ：要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。 cache ：要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。 data ：要求为Object或String类型的参数，发送到服务器的数据。如果不是字符串，将自动转换为字符串格式。get请求中将附加在url后。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。 dataType :要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下： xml：返回XML文档，可用JQuery处理。 html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。 script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。 json：返回JSON数据。 jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。 text：返回纯文本字符串。 success :要求为Function类型的参数，请求成功后调用的回调函数。可以携带后台传回的数据。 1234567891011//获取后台传来的json数据并在标签中填入success:function (data) &#123; $(\"#e_id\").val(data.id); $(\"#e_name\").val(data.name); $(\"#e_classId\").val(data.classId); $(\"#e_qqNumber\").val(data.qqNumber); $(\"#e_roomId\").val(data.roomId); $(\"#e_sex\").val(data.sex);&#125; 使用实例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;form class=\"form-group\" id=\"topic\"&gt; &lt;div class=\"container col-md-6\" style=\"float:left\"&gt; &lt;textarea class=\"form-control\" rows=\"10\" name=\"content\"&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class=\"container col-md-6\" style=\"float: right\"&gt; &lt;div class=\"md-2 \"&gt; &lt;label&gt; &lt;input type=\"radio\" name=\"answerNumber\" value=\"1\"&gt; &lt;/label&gt; A: &lt;input type=\"text\" class=\"form-control\" name=\"answer\"&gt; &lt;/div&gt; &lt;div class=\"md-2\"&gt; &lt;label&gt; &lt;input type=\"radio\" name=\"answerNumber\" value=\"2\"&gt; &lt;/label&gt; B: &lt;input id=\"radio\" type=\"text\" class=\"form-control\" name=\"answer\"&gt; &lt;/div&gt; &lt;div class=\"md-2\"&gt; &lt;label&gt; &lt;input type=\"radio\" name=\"answerNumber\" value=\"3\"&gt; &lt;/label&gt; C：&lt;input type=\"text\" class=\"form-control\" name=\"answer\"&gt; &lt;/div&gt; &lt;div class=\"md-2\"&gt; &lt;label&gt; &lt;input type=\"radio\" name=\"answerNumber\" value=\"4\"&gt; &lt;/label&gt; D：&lt;input type=\"text\" class=\"form-control\" name=\"answer\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt;//前台name属性与后台属性一一对应，若有多个name重名，那么会将其组成一个数组，一起传给后台。$(\"#submitBtn\").click(function () &#123; var data = $(\"#topic\").serialize();//将表格的数据序列化 alert(data); $.ajax(&#123; url: \"/edit/topic/upload\", data: data, type: \"s\", dataType: \"json\", success: function (data) &#123; alert(data.message); &#125; &#125;) &#125;); 1234567891011121314151617181920212223242526272829303132333435363738394041@ResponseBody @RequestMapping(value = \"/upload\",method = RequestMethod.POST) public Msg receiveTopic(Topic topic , HttpSession session) throws Exception &#123; //实体类topic中，有与前台name属性对应的字段，会将其自动赋予topic属性中。 Msg msg = new Msg();//Msg 是自定义的一个消息类用于前后台数据交互。 log.debug(\"提示+++++++++\"+topic); msg.setStatus(ResultEnum.SUCCESS.value()); if (checkAnswer(topic.getAnswerNumber())||StringUtils.isEmpty(topic.getContent())) &#123; msg.setMessage(\"题目上传失败，请检查题目格式\"); return msg; &#125; else &#123; int teacherId = 1; int subjectId = 1; log.debug(\"提示:----------- :\" + topic + \"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\"); topic.setStatus(0); topic.setSubjectId(subjectId); topic.setTeacherId(teacherId); String answer = topic.getAnswer(); if (!StringUtils.isEmpty(answer)) &#123; String[] answers = answer.split(\",\"); if(answers.length&lt;4)&#123; msg.setMessage(\"题目上传失败，请检查题目格式\"); return msg; &#125; StringBuffer stringBuffer = new StringBuffer(); for (int i = 0; i &lt; answers.length - 1; i++) &#123; stringBuffer.append(answers[i] + \"-\"); &#125; stringBuffer.append(answers[answers.length - 1]); topic.setAnswer(stringBuffer.toString()); &#125; else &#123; topic.setAnswer(\"chose\"); &#125; msg.setMessage(\"上传成功\"); uploadTopicService.uploadTopic(topic); return msg; &#125; &#125;","categories":[{"name":"-学习","slug":"学习","permalink":"https://ishantao.github.io/categories/学习/"}],"tags":[{"name":"-JSON -Ajax","slug":"JSON-Ajax","permalink":"https://ishantao.github.io/tags/JSON-Ajax/"}]},{"title":"First","slug":"hantao","date":"2018-08-29T12:45:43.218Z","updated":"2018-08-30T00:45:13.802Z","comments":true,"path":"2018/08/29/hantao/","link":"","permalink":"https://ishantao.github.io/2018/08/29/hantao/","excerpt":"","text":"我的弟一片文章哈哈终于成功了1String = \"终于成功了\";","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-08-29T11:18:45.646Z","updated":"2018-08-29T11:18:45.647Z","comments":true,"path":"2018/08/29/hello-world/","link":"","permalink":"https://ishantao.github.io/2018/08/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}